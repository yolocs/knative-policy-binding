/*
Copyright 2020 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "github.com/yolocs/knative-policy-binding/pkg/apis/security/v1alpha2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HTTPPolicyBindingLister helps list HTTPPolicyBindings.
type HTTPPolicyBindingLister interface {
	// List lists all HTTPPolicyBindings in the indexer.
	List(selector labels.Selector) (ret []*v1alpha2.HTTPPolicyBinding, err error)
	// HTTPPolicyBindings returns an object that can list and get HTTPPolicyBindings.
	HTTPPolicyBindings(namespace string) HTTPPolicyBindingNamespaceLister
	HTTPPolicyBindingListerExpansion
}

// hTTPPolicyBindingLister implements the HTTPPolicyBindingLister interface.
type hTTPPolicyBindingLister struct {
	indexer cache.Indexer
}

// NewHTTPPolicyBindingLister returns a new HTTPPolicyBindingLister.
func NewHTTPPolicyBindingLister(indexer cache.Indexer) HTTPPolicyBindingLister {
	return &hTTPPolicyBindingLister{indexer: indexer}
}

// List lists all HTTPPolicyBindings in the indexer.
func (s *hTTPPolicyBindingLister) List(selector labels.Selector) (ret []*v1alpha2.HTTPPolicyBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.HTTPPolicyBinding))
	})
	return ret, err
}

// HTTPPolicyBindings returns an object that can list and get HTTPPolicyBindings.
func (s *hTTPPolicyBindingLister) HTTPPolicyBindings(namespace string) HTTPPolicyBindingNamespaceLister {
	return hTTPPolicyBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HTTPPolicyBindingNamespaceLister helps list and get HTTPPolicyBindings.
type HTTPPolicyBindingNamespaceLister interface {
	// List lists all HTTPPolicyBindings in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha2.HTTPPolicyBinding, err error)
	// Get retrieves the HTTPPolicyBinding from the indexer for a given namespace and name.
	Get(name string) (*v1alpha2.HTTPPolicyBinding, error)
	HTTPPolicyBindingNamespaceListerExpansion
}

// hTTPPolicyBindingNamespaceLister implements the HTTPPolicyBindingNamespaceLister
// interface.
type hTTPPolicyBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HTTPPolicyBindings in the indexer for a given namespace.
func (s hTTPPolicyBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.HTTPPolicyBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.HTTPPolicyBinding))
	})
	return ret, err
}

// Get retrieves the HTTPPolicyBinding from the indexer for a given namespace and name.
func (s hTTPPolicyBindingNamespaceLister) Get(name string) (*v1alpha2.HTTPPolicyBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("httppolicybinding"), name)
	}
	return obj.(*v1alpha2.HTTPPolicyBinding), nil
}
