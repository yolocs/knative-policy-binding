/*
Copyright 2020 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "github.com/yolocs/knative-policy-binding/pkg/apis/security/v1alpha2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PolicyPodspecableBindingLister helps list PolicyPodspecableBindings.
type PolicyPodspecableBindingLister interface {
	// List lists all PolicyPodspecableBindings in the indexer.
	List(selector labels.Selector) (ret []*v1alpha2.PolicyPodspecableBinding, err error)
	// PolicyPodspecableBindings returns an object that can list and get PolicyPodspecableBindings.
	PolicyPodspecableBindings(namespace string) PolicyPodspecableBindingNamespaceLister
	PolicyPodspecableBindingListerExpansion
}

// policyPodspecableBindingLister implements the PolicyPodspecableBindingLister interface.
type policyPodspecableBindingLister struct {
	indexer cache.Indexer
}

// NewPolicyPodspecableBindingLister returns a new PolicyPodspecableBindingLister.
func NewPolicyPodspecableBindingLister(indexer cache.Indexer) PolicyPodspecableBindingLister {
	return &policyPodspecableBindingLister{indexer: indexer}
}

// List lists all PolicyPodspecableBindings in the indexer.
func (s *policyPodspecableBindingLister) List(selector labels.Selector) (ret []*v1alpha2.PolicyPodspecableBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.PolicyPodspecableBinding))
	})
	return ret, err
}

// PolicyPodspecableBindings returns an object that can list and get PolicyPodspecableBindings.
func (s *policyPodspecableBindingLister) PolicyPodspecableBindings(namespace string) PolicyPodspecableBindingNamespaceLister {
	return policyPodspecableBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PolicyPodspecableBindingNamespaceLister helps list and get PolicyPodspecableBindings.
type PolicyPodspecableBindingNamespaceLister interface {
	// List lists all PolicyPodspecableBindings in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha2.PolicyPodspecableBinding, err error)
	// Get retrieves the PolicyPodspecableBinding from the indexer for a given namespace and name.
	Get(name string) (*v1alpha2.PolicyPodspecableBinding, error)
	PolicyPodspecableBindingNamespaceListerExpansion
}

// policyPodspecableBindingNamespaceLister implements the PolicyPodspecableBindingNamespaceLister
// interface.
type policyPodspecableBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PolicyPodspecableBindings in the indexer for a given namespace.
func (s policyPodspecableBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.PolicyPodspecableBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.PolicyPodspecableBinding))
	})
	return ret, err
}

// Get retrieves the PolicyPodspecableBinding from the indexer for a given namespace and name.
func (s policyPodspecableBindingNamespaceLister) Get(name string) (*v1alpha2.PolicyPodspecableBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("policypodspecablebinding"), name)
	}
	return obj.(*v1alpha2.PolicyPodspecableBinding), nil
}
