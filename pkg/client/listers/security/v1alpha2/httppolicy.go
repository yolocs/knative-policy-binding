/*
Copyright 2020 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "github.com/yolocs/knative-policy-binding/pkg/apis/security/v1alpha2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HTTPPolicyLister helps list HTTPPolicies.
type HTTPPolicyLister interface {
	// List lists all HTTPPolicies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha2.HTTPPolicy, err error)
	// HTTPPolicies returns an object that can list and get HTTPPolicies.
	HTTPPolicies(namespace string) HTTPPolicyNamespaceLister
	HTTPPolicyListerExpansion
}

// hTTPPolicyLister implements the HTTPPolicyLister interface.
type hTTPPolicyLister struct {
	indexer cache.Indexer
}

// NewHTTPPolicyLister returns a new HTTPPolicyLister.
func NewHTTPPolicyLister(indexer cache.Indexer) HTTPPolicyLister {
	return &hTTPPolicyLister{indexer: indexer}
}

// List lists all HTTPPolicies in the indexer.
func (s *hTTPPolicyLister) List(selector labels.Selector) (ret []*v1alpha2.HTTPPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.HTTPPolicy))
	})
	return ret, err
}

// HTTPPolicies returns an object that can list and get HTTPPolicies.
func (s *hTTPPolicyLister) HTTPPolicies(namespace string) HTTPPolicyNamespaceLister {
	return hTTPPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HTTPPolicyNamespaceLister helps list and get HTTPPolicies.
type HTTPPolicyNamespaceLister interface {
	// List lists all HTTPPolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha2.HTTPPolicy, err error)
	// Get retrieves the HTTPPolicy from the indexer for a given namespace and name.
	Get(name string) (*v1alpha2.HTTPPolicy, error)
	HTTPPolicyNamespaceListerExpansion
}

// hTTPPolicyNamespaceLister implements the HTTPPolicyNamespaceLister
// interface.
type hTTPPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HTTPPolicies in the indexer for a given namespace.
func (s hTTPPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.HTTPPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.HTTPPolicy))
	})
	return ret, err
}

// Get retrieves the HTTPPolicy from the indexer for a given namespace and name.
func (s hTTPPolicyNamespaceLister) Get(name string) (*v1alpha2.HTTPPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("httppolicy"), name)
	}
	return obj.(*v1alpha2.HTTPPolicy), nil
}
