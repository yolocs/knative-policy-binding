/*
Copyright 2020 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/yolocs/knative-policy-binding/pkg/apis/security/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// OpenPolicyLister helps list OpenPolicies.
type OpenPolicyLister interface {
	// List lists all OpenPolicies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.OpenPolicy, err error)
	// OpenPolicies returns an object that can list and get OpenPolicies.
	OpenPolicies(namespace string) OpenPolicyNamespaceLister
	OpenPolicyListerExpansion
}

// openPolicyLister implements the OpenPolicyLister interface.
type openPolicyLister struct {
	indexer cache.Indexer
}

// NewOpenPolicyLister returns a new OpenPolicyLister.
func NewOpenPolicyLister(indexer cache.Indexer) OpenPolicyLister {
	return &openPolicyLister{indexer: indexer}
}

// List lists all OpenPolicies in the indexer.
func (s *openPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.OpenPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OpenPolicy))
	})
	return ret, err
}

// OpenPolicies returns an object that can list and get OpenPolicies.
func (s *openPolicyLister) OpenPolicies(namespace string) OpenPolicyNamespaceLister {
	return openPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// OpenPolicyNamespaceLister helps list and get OpenPolicies.
type OpenPolicyNamespaceLister interface {
	// List lists all OpenPolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.OpenPolicy, err error)
	// Get retrieves the OpenPolicy from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.OpenPolicy, error)
	OpenPolicyNamespaceListerExpansion
}

// openPolicyNamespaceLister implements the OpenPolicyNamespaceLister
// interface.
type openPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all OpenPolicies in the indexer for a given namespace.
func (s openPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.OpenPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OpenPolicy))
	})
	return ret, err
}

// Get retrieves the OpenPolicy from the indexer for a given namespace and name.
func (s openPolicyNamespaceLister) Get(name string) (*v1alpha1.OpenPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("openpolicy"), name)
	}
	return obj.(*v1alpha1.OpenPolicy), nil
}
