/*
Copyright 2020 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/yolocs/knative-policy-binding/pkg/apis/security/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AuthorizableBindingLister helps list AuthorizableBindings.
type AuthorizableBindingLister interface {
	// List lists all AuthorizableBindings in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.AuthorizableBinding, err error)
	// AuthorizableBindings returns an object that can list and get AuthorizableBindings.
	AuthorizableBindings(namespace string) AuthorizableBindingNamespaceLister
	AuthorizableBindingListerExpansion
}

// authorizableBindingLister implements the AuthorizableBindingLister interface.
type authorizableBindingLister struct {
	indexer cache.Indexer
}

// NewAuthorizableBindingLister returns a new AuthorizableBindingLister.
func NewAuthorizableBindingLister(indexer cache.Indexer) AuthorizableBindingLister {
	return &authorizableBindingLister{indexer: indexer}
}

// List lists all AuthorizableBindings in the indexer.
func (s *authorizableBindingLister) List(selector labels.Selector) (ret []*v1alpha1.AuthorizableBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AuthorizableBinding))
	})
	return ret, err
}

// AuthorizableBindings returns an object that can list and get AuthorizableBindings.
func (s *authorizableBindingLister) AuthorizableBindings(namespace string) AuthorizableBindingNamespaceLister {
	return authorizableBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AuthorizableBindingNamespaceLister helps list and get AuthorizableBindings.
type AuthorizableBindingNamespaceLister interface {
	// List lists all AuthorizableBindings in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.AuthorizableBinding, err error)
	// Get retrieves the AuthorizableBinding from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.AuthorizableBinding, error)
	AuthorizableBindingNamespaceListerExpansion
}

// authorizableBindingNamespaceLister implements the AuthorizableBindingNamespaceLister
// interface.
type authorizableBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AuthorizableBindings in the indexer for a given namespace.
func (s authorizableBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AuthorizableBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AuthorizableBinding))
	})
	return ret, err
}

// Get retrieves the AuthorizableBinding from the indexer for a given namespace and name.
func (s authorizableBindingNamespaceLister) Get(name string) (*v1alpha1.AuthorizableBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("authorizablebinding"), name)
	}
	return obj.(*v1alpha1.AuthorizableBinding), nil
}
