/*
Copyright 2020 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/yolocs/knative-policy-binding/pkg/apis/security/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PolicyBindingLister helps list PolicyBindings.
type PolicyBindingLister interface {
	// List lists all PolicyBindings in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.PolicyBinding, err error)
	// PolicyBindings returns an object that can list and get PolicyBindings.
	PolicyBindings(namespace string) PolicyBindingNamespaceLister
	PolicyBindingListerExpansion
}

// policyBindingLister implements the PolicyBindingLister interface.
type policyBindingLister struct {
	indexer cache.Indexer
}

// NewPolicyBindingLister returns a new PolicyBindingLister.
func NewPolicyBindingLister(indexer cache.Indexer) PolicyBindingLister {
	return &policyBindingLister{indexer: indexer}
}

// List lists all PolicyBindings in the indexer.
func (s *policyBindingLister) List(selector labels.Selector) (ret []*v1alpha1.PolicyBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PolicyBinding))
	})
	return ret, err
}

// PolicyBindings returns an object that can list and get PolicyBindings.
func (s *policyBindingLister) PolicyBindings(namespace string) PolicyBindingNamespaceLister {
	return policyBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PolicyBindingNamespaceLister helps list and get PolicyBindings.
type PolicyBindingNamespaceLister interface {
	// List lists all PolicyBindings in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.PolicyBinding, err error)
	// Get retrieves the PolicyBinding from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.PolicyBinding, error)
	PolicyBindingNamespaceListerExpansion
}

// policyBindingNamespaceLister implements the PolicyBindingNamespaceLister
// interface.
type policyBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PolicyBindings in the indexer for a given namespace.
func (s policyBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PolicyBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PolicyBinding))
	})
	return ret, err
}

// Get retrieves the PolicyBinding from the indexer for a given namespace and name.
func (s policyBindingNamespaceLister) Get(name string) (*v1alpha1.PolicyBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("policybinding"), name)
	}
	return obj.(*v1alpha1.PolicyBinding), nil
}
